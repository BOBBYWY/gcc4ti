[Main]
Name=strtod
Type=Function
Subtype=tigcc.a
Header Files=stdlib.h
Definition=double strtod(const char *str, char **endptr);
Attributes=__attribute__((__pure__))
MinAMS=2.00
See Also=timath.h/atof

[Library Call]
Asm=1

[Description]
Converts a string to a floating point value, with optional error-checking.

[Explanation]
strtod converts a string pointed to by <I>s</I> to a floating point value. It recognizes
the following character representation of a floating point number:
<UL>
<LI>an optional string of spaces;</LI>
<LI>an optional minus sign <B>(0xAD character, instead of ordinary '-')</B>;</LI>
<LI>a string of digits and an optional decimal point (the digits can be on both
sides of the decimal point);</LI>
<LI>an optional exponent followed by a (optionally signed) integer. <B>The exponent
character needs to be 0x95, instead of ordinary 'e' or 'E'.</B></LI>
</UL>

It is easy to "preprocess" any string to satisfy this convention before calling strtod,
by code such as the following snippet (assuming that <I>c</I> is a char variable, and <I>i</I>
is an integer variable):
<PRE>for (i = 0; (c = s[i]); i++)
 // <I>Yes, the second '=' is really '=', not '=='</I>...
  {
    if (c == '-') s[i] = 0xAD;
    if ((c|32) == 'e') s[i] = 0x95;
  }
</PRE>

strtod returns the converted value (BCD floating-point number). If <I>endptr</I>
is not NULL, the char pointer pointed to by it is assigned the address of
the first character of the string following the converted floating-point
number. If the conversion fails, 0.0 is returned and <I>*endptr</I> is assigned
the value <I>str</I>.<BR>
If the result of the conversion would cause overflow, strtod sets <A HREF="$$LINK(unknown.h/errno)">errno</A>
to ERANGE and returns 9.9999999999999e+999. If the result of the conversion would cause underflow,
strtod sets <A HREF="$$LINK(unknown.h/errno)">errno</A> to ERANGE and returns 0.
<BR><BR>
<B>Note:</B> This function is part of AMS, but it is wrapped in the library to prevent a crash when
<CODE>end_ptr == NULL</CODE> on early AMS 2.xx versions. In fact, <A HREF="$$LINK(timath.h/atof)">atof</A>
ends up calling strtod, and using atof takes up more space into your program than strtod does, while not
providing the <I>endptr</I> argument, which helps for error checking.

[References]
Out=system.h/CTypeTable, unknown.h/errno, estack.h/push_ulong_to_integer, unknown.h/_bcd_math
In=unknown.h/EQU_getNameInfo, unknown.h/push_parse_prgm_or_func_text, bascmd.h/cmd_get, estack.h/push_parse_text
